plugins {
	id 'com.github.johnrengelman.shadow'
}

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
	
	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}


repositories {
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
	
	modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
	
	modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
	
	modImplementation "net.fabricmc:fabric-language-kotlin:1.13.3+kotlin.${libs.versions.kotlin.get()}"
	
	common(project(path: ':common', configuration: 'namedElements')) { transitive false }
	shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
	
	modImplementation(libs.bundles.cardinalComponents)
}

processResources {
	inputs.properties([
			'version': project.version,
			'mod_id': project.mod_id,
			'mod_name': project.mod_name,
			'mod_desc': project.mod_desc
	])
	
	filesMatching('fabric.mod.json') {
		expand([
				'version': project.version,
				'mod_id': project.mod_id,
				'mod_name': project.mod_name,
				'mod_desc': project.mod_desc
		])
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = 'dev-shadow'
}

remapJar {
	input.set shadowJar.archiveFile
}
